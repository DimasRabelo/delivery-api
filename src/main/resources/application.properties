# ===================================================================
# CONFIGURAÇÃO H2 DATABASE (EM MEMÓRIA)
# ===================================================================
# URL de conexão JDBC para o banco em memória chamado 'deliverydb'
spring.datasource.url=jdbc:h2:mem:deliverydb
# Driver JDBC do H2
spring.datasource.driver-class-name=org.h2.Driver
# Usuário padrão do banco H2
spring.datasource.username=sa
# Senha padrão do banco H2
spring.datasource.password=password

# ===================================================================
# H2 CONSOLE
# ===================================================================
# Habilita o console web do H2
spring.h2.console.enabled=true
# Define o caminho para acessar o console (ex: http://localhost:8080/h2-console)
spring.h2.console.path=/h2-console
# Permite que o console seja acessado de outras máquinas (não apenas localhost)
spring.h2.console.settings.web-allow-others=true

# ===================================================================
# JPA / HIBERNATE
# ===================================================================
# Define o dialeto SQL específico para o banco H2
spring.jpa.database-platform=org.hibernate.dialect.H2Dialect
# 'create-drop': O Hibernate irá criar o schema no início e derrubá-lo no final.
# Ótimo para testes, mas NUNCA use em produção (mude para 'validate' ou 'none')
spring.jpa.hibernate.ddl-auto=create-drop
# Garante que os scripts (data.sql) rodem APÓS a criação do schema pelo Hibernate
spring.jpa.defer-datasource-initialization=true
# Mostra no console o SQL que o Hibernate está executando
spring.jpa.show-sql=true
# Formata o SQL logado para ser mais legível
spring.jpa.properties.hibernate.format_sql=true
# Adiciona comentários ao SQL logado (ex: de qual método Java a query veio)
spring.jpa.properties.hibernate.use_sql_comments=true
# 'false' é a melhor prática: Evita o "Open Session in View",
# prevenindo que a sessão com o banco fique aberta até a renderização da view.
spring.jpa.open-in-view=false
# Habilita o processamento em lote (batch) para inserts/updates
spring.jpa.properties.hibernate.jdbc.batch_size=20
spring.jpa.properties.hibernate.order_inserts=true
spring.jpa.properties.hibernate.order_updates=true

# ===================================================================
# INICIALIZAÇÃO DE SCRIPTS SQL (data.sql, schema.sql)
# ===================================================================
# 'always': Sempre executa os scripts de inicialização (data.sql)
spring.sql.init.mode=always

# ===================================================================
# CONFIGURAÇÃO JWT (JSON WEB TOKEN)
# ===================================================================
# Chave secreta para assinar os tokens.
# DEVE ser a mesma lida pelo JwtUtil.java.
app.jwt.secret=mySecretKey123456789012345678901234567890123456789012345678901234567890
# Tempo de expiração em milissegundos.
# 60000ms = 1 minuto (para testes)
# 1800000ms = 30 minutos (para produção)
app.jwt.expiration-ms=60000

# ===================================================================
# CONFIGURAÇÃO SWAGGER / OPENAPI
# ===================================================================
# Caminho para a definição JSON da API
springdoc.api-docs.path=/api-docs
# Caminho para a interface gráfica do Swagger
springdoc.swagger-ui.path=/swagger-ui.html
# Ordena as operações (endpoints) por método (DELETE, GET, POST, PUT)
springdoc.swagger-ui.operationsSorter=method
# Ordena as Tags (Controllers) alfabeticamente
springdoc.swagger-ui.tagsSorter=alpha

# ===================================================================
# USUÁRIO PADRÃO (INATIVO)
# ===================================================================
# As linhas abaixo definem o usuário Basic Auth padrão do Spring Boot.
# Elas estão INATIVAS e sendo IGNORADAS, pois o seu SecurityConfig.java
# customizado (com securityFilterChain) toma prioridade.
# Podem ser removidas com segurança.
# spring.security.user.name=admin
# spring.security.user.password=admin

# ===================================================================
# CONFIGURAÇÃO DE LOGGING
# ===================================================================
# Logs de SQL e transações (ótimos para debug)
logging.level.org.hibernate.SQL=DEBUG
# Nível TRACE mostra os valores sendo "bindados" (setados) nas queries SQL
logging.level.org.hibernate.type.descriptor.sql.BasicBinder=TRACE
logging.level.org.springframework.transaction=DEBUG
logging.level.org.springdoc=DEBUG
logging.level.org.springframework.web=DEBUG

# Logs principais da aplicação
logging.level.org.springframework.security=DEBUG
logging.level.com.deliverytech=DEBUG

# ===================================================================
# CONFIGURAÇÃO DO SERVIDOR
# ===================================================================
server.port=8080